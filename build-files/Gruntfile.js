/*!******************************************************************
Framework:   FrontBox 1.0.4 (github.com/BartoszPiwek/FrontBox)
Author:      Bartosz Piwek
********************************************************************/

module.exports = function(grunt) {

  'use strict';

  require('jit-grunt')(grunt, {
    sprite: 'grunt-spritesmith',
    autocolor: 'node_modules/frontbox-grunt/tasks/autocolor.js',
    autoclass: 'node_modules/frontbox-grunt/tasks/autoclass.js',
    autosvg: 'node_modules/frontbox-grunt/tasks/autosvg.js',
    autometa: 'node_modules/frontbox-grunt/tasks/autometa.js',
  });
  require('connect-livereload')();
  require('time-grunt')(grunt);

  grunt.loadNpmTasks('grunt-css-statistics');
  grunt.loadNpmTasks('grunt-html');
  grunt.loadNpmTasks('grunt-preprocess');
  grunt.loadNpmTasks('grunt-zip');
  grunt.loadNpmTasks('grunt-combine-media-queries');
  grunt.loadNpmTasks('grunt-remove-logging');
  grunt.loadNpmTasks('grunt-remove-calls');
  //=========================================================================
  // Settings

  // Html variables
  var html_variables = grunt.file.readJSON('settings/website_conf.json');

  var js_libs_import = grunt.file.readJSON('settings/js_libs.json'),
    js_libs = js_libs_import.js_libs;

  function renameLibs(element, index, array) {
    js_libs[index] = 'src' + element;
  }
  js_libs.forEach(renameLibs);
  js_libs.push('public/prod' + js_libs_import.script);

  // END Settings
  //=========================================================================

  grunt.initConfig({
    pkg: grunt.file.readJSON('package.json'),

    /**
     * Process
     */

    preprocess: {

      // Frontbox scripts
      dev_frontbox: {
        src: ['assets/js/frontbox.js'],
        options: {
          inline: true,
        }
      },
      prod_frontbox: {
        src: ['assets/js/frontbox.js'],
        options: {
          inline: true,
        }
      },
      prod_js: {
        src: ['assets/js/scripts.js'],
        options: {
          inline: true,
        }
      },

      // HTML
      dev: {
        src: ['assets/**/*.html'],
        options: {
          inline: true,
          context: html_variables,
        },
        files: [{
          src: '**/*.html',
          ext: '.html',
          cwd: 'public/dev',
          dest: 'public/dev',
          expand: true
        }],
      },

      prod: {
        src: ['public/prod/**/*.html'],
        options: {
          inline: true,
          context: html_variables,
        },
        files: [{
          src: '**/*.html',
          ext: '.html',
          cwd: 'public/prod',
          dest: 'public/prod',
          expand: true
        }],
      }
    },

    /**
     * VirtualHost
     */

    connect: {
      dev: {
        options: {
          port: 8181,
          base: 'public/dev',
          hostname: 'localhost',
          livereload: true,
          open: {
            opn: true,
            target: 'http://localhost:8181',
            appName: 'chrome',
          }
        }
      },
      prod: {
        options: {
          port: 8282,
          base: 'public/prod',
          keepalive: true,
          hostname: 'localhost',
          debug: true,
          livereload: false,
          open: {
            opn: true,
            target: 'http://localhost:8282',
            appName: 'chrome --no-sandbox',
          }          
        }
      }
    },

    /**
     * HTML tasks
     */

    // Minify
    // https://github.com/kangax/html-minifier#options-quick-reference
    htmlmin: {
      prod: {
        options: {
            caseSensitive: true,
            collapseBooleanAttributes: false,
            collapseInlineTagWhitespace: false,
            collapseWhitespace: true,
            conservativeCollapse: false,
            customAttrCollapse: false,
            decodeEntities: true,
            html5: true,
            ignoreCustomFragments: [ 
              (/<p(.*?)>(.*?)<\/p>/g),
              (/<span(.*?)<\/span>/g),
              (/<h1(.*?)<\/h1>/g),
              (/<h2(.*?)<\/h2>/g),
              (/<h3(.*?)<\/h3>/g),
              (/<h4(.*?)<\/h4>/g),
              (/<h5(.*?)<\/h5>/g),
              (/<h6(.*?)<\/h6>/g),
              (/<meta(.*?)>/g),
              (/<link(.*?)>/g),
              (/<html(.*?)>/g),
              (/<script(.*?)<\/script>/g),
            ],
            includeAutoGeneratedTags: false,
            keepClosingSlash: false,
            maxLineLength: 0,
            minifyCSS: true, 
            minifyJS: true, 
            preserveLineBreaks: false,
            preventAttributesEscaping: false,
            processConditionalComments: true, 
            processScripts: [
              "text/html"
            ],
            removeAttributeQuotes: false,
            removeComments: true, 
            removeEmptyAttributes: true, 
            removeEmptyElements: true, 
            removeOptionalTags: true, 
            removeRedundantAttributes: false,
            removeScriptTypeAttributes: true, 
            removeStyleLinkTypeAttributes: true, 
            removeTagWhitespace: false, 
            sortAttributes: false,
            sortClassName: false,
            trimCustomFragments: true, 
            useShortDoctype: false
        },
        files: [{
          expand: true,
          cwd: 'public/prod/',
          src: ['*.html'],
          dest: 'public/prod/',
          ext: '.html'
        }]
      }
    },

    // Concat
    processhtml: {
      options: {
        process: true,
        recursive: true,
        includeBase: 'src/template/includes/',
        data: html_variables,
        customBlockTypes: ['build-files/embed_scripts.js']
      },
      dev: {
        options: {
          environment: 'dev'
        },
        files: [{
          expand: true,
          cwd: 'assets/',
          src: ['*.html'],
          dest: 'assets/',
          ext: '.html'
        }]
      },
      prod: {
        options: {
          environment: 'prod'
        },
        files: [{
          expand: true,
          cwd: 'public/prod/',
          src: ['*.html'],
          dest: 'public/prod/',
          ext: '.html'
        }]
      },
      critical: {
        options: {
          environment: 'critical'
        },
        files: [{
          expand: true,
          cwd: 'public/prod/',
          src: ['*.html', 'debug/*.html'],
          dest: 'public/prod/',
          ext: '.html'
        }]
      }
    },

    // Prettify
    prettify: {
      options: {
        "indent": 4,
        "condense": true,
        "indent_inner_html": true,
      },
      html: {
        files: [{
          expand: true,
          cwd: 'public/prod/',
          src: ['*.html'],
          dest: 'public/prod/',
          ext: '.html'
        }]
      }
    },

    // Insert inline SVG
    autosvg: {
      dev: {
        expand: true,
        src: ['*.html', "*.php"],
        cwd: 'assets/',
        flatten: true,
        options: {
          output_directory: "assets/",
          svg_directory: "src/images/svg/",
          debug_log: true,
        },
      },
      prod: {
        expand: true,
        src: ['*.html', "*.php"],
        cwd: 'public/prod/',
        flatten: true,
        options: {
          output_directory: "public/prod/",
          svg_directory: "src/images/svg/",
          debug_log: true,
        },
      },
    },

    // Insert SEO meta tags
    autometa: {
      automatic: {
        expand: true,
        src: ['*.html'],
        cwd: 'public/prod',
        flatten: true,
        filter: 'isFile'
      },
      options: {
        debug: true,
        twitter_account: html_variables.website_twitter_account,
        website_name: html_variables.website_name,
        website_url: html_variables.website_url,
        image_dir: "images/og",
        image_format: "jpg",
        website_locale: "pl_PL",
        rename_url: {
          "index.html": "index2.html"
        },
        website_dir: "public/prod/"
      }
    },

    // Hash files
    // TODO: rapair regex for fonts file
    hash_res: {
      css: {
        options: {
          resDir: 'public/prod',
          resReg: [
            /(images\/[^.]+\.(?:png|gif|jpg))(\??)/g,
            // /(fonts\/[^.]+\.[\w]+)(\??)/g
          ],
          force: true,
        },
        files: [{
          expand: true,
          cwd: 'public/prod/css',
          src: ['**/*.css'],
          dest: 'public/prod/css'
        }]
      },
      html: {
        options: {
          resDir: 'public/prod',
          force: true,
          resReg: [
            /(images\/[^.]+\.(?:png|gif|jpg|ico))(\??)/g,
            /(css\/[^.]+\.(?:css))(\??)/g,
            /(js\/[^.]+\.(?:min.js))(\??)/g
          ]
        },
        files: [{
          expand: true,
          cwd: 'public/prod',
          src: ['*.html'],
          dest: 'public/prod'
        }]
      }
    },

    /**
     * Copy proccess
     */

    copy: {
      // Frontbox update
      frontbox_update: {
        files: [{
          expand: true,
          cwd: 'temp/frontbox/FrontBox-CSS-master/src/less/frontbox/',
          src: '*',
          dest: 'temp/src/less/frontbox/',
          filter: 'isFile'
        }],
      },
      // Libraries
      libs: {
        files: {
          // jQuery
          'src/js/libs/jquery.js': 'node_modules/jquery/dist/jquery.js',
          // picturefill
          'src/js/libs/picturefill.js': 'node_modules/picturefill/dist/picturefill.js',
          // Select2
          'src/js/libs/select2.js': 'node_modules/select2/dist/js/select2.js',
          'src/less/libs/select2.less': 'node_modules/select2/dist/css/select2.css',
          // tooltipster
          'src/js/libs/tooltipster.js': 'node_modules/tooltipster/dist/js/tooltipster.main.js',
          'src/less/libs/tooltipster.main.less': 'node_modules/toltipster/dist/css/tooltipster.main.css',
          // bLazy (https://www.npmjs.com/package/blazy)
          'src/js/libs/blazy.js': 'node_modules/blazy/blazy.js',
          // Cookies
          'src/js/libs/js-cookies.js': 'node_modules/js-cookie/src/js.cookie.js',
          // Validator
          'src/js/libs/validate.min.js': 'node_modules/jquery-validation/dist/jquery.validate.min.js',
        }
      },
      // DEV version
      dev: {
        files: [
          // img
          {
            expand: true,
            cwd: 'src/images/',
            src: ['**/*'],
            dest: 'assets/images/',
            filter: 'isFile'
          },
          // static css
          {
            expand: true,
            cwd: 'src/css',
            src: '*.css',
            dest: 'assets/css/',
            filter: 'isFile'
          },
          // fonts
          {
            expand: true,
            cwd: 'src/fonts/',
            src: '**',
            dest: 'assets/fonts/',
            filter: 'isFile'
          },
          // javascript
          {
            expand: true,
            cwd: 'src/js/',
            src: ['**', 'libs/**'],
            dest: 'assets/js/',
            filter: 'isFile'
          },
        ]
      },
      // DEV Frontbox scripts
      dev_frontbox: {
        files: [{
            expand: true,
            cwd: 'src/js/frontbox/',
            src: ['*.js'],
            dest: 'assets/js/frontbox/',
            filter: 'isFile'
          },
          {
            expand: true,
            cwd: 'src/js/',
            src: ['frontbox.js'],
            dest: 'assets/js/',
            filter: 'isFile'
          },
        ]
      },
      dev_js: {
        files: [{
          expand: true,
          cwd: 'src/js/',
          src: ['*'],
          dest: 'assets/js/',
          filter: 'isFile',
        }],
      },
      // PROD version
      prod: {
        files: [{
            expand: true,
            cwd: 'src/images/',
            src: '**',
            dest: 'assets/images/',
            filter: 'isFile'
          },
          {
            expand: true,
            cwd: 'assets/fonts/',
            src: '**',
            dest: 'assets/fonts/',
            filter: 'isFile'
          },
          // static css
          {
            expand: true,
            cwd: 'src/css',
            src: '*.css',
            dest: '',
            filter: 'isFile'
          },
          // javascript
          {
            expand: true,
            cwd: 'assets/js/',
            src: ['**', 'libs/**'],
            dest: 'assets/js/',
            filter: 'isFile'
          },
        ]
      },
    },

    /**
     * Javascript tasks
     */

    // Concat
    concat: {
      prod: {
        src: [
          'src/js/libs/jquery.js',
          'src/js/libs/validate.min.js',
          'src/js/libs/slick.min.js',
          'src/js/libs/js-cookies.js',
          'src/js/libs/particles.min.js',
          'src/js/libs/TweenMax.js',
          'src/js/libs/sharer.min.js',
          'src/js/libs/bootstrap.min.js',
          'assets/js/frontbox.js'
        ],
        dest: 'assets/js/scripts.js',
      }
    },

    // Uglify
    uglify: {
      options: {
        preserveComments: false,
        drop_console: true,
      },
      prod: {
        files: {
          'assets/js/scripts.js': ['assets/js/scripts.js']
        }
      },
    },

    // Compiler
    babel: {
      options: {
        sourceMap: false,
        presets: ['env']
      },
      dist: {
        files: {
          'assets/js/frontbox.js': 'assets/js/frontbox.js'
        }
      }
    },

    // Remove functions
    strip_code: {
      options: {
        blocks: [
          {
              start_block: "/* test-code */",
              end_block: "/* end-test-code */"
          }
        ]
      },
      your_target: {
        src: 'assets/js/frontbox.js',
      },
    },

    /**
     * Images tasks
     */

    // Compress
    image: {
      dynamic: {
        options: {
          svgo: true,
          zopflipng: ['-y'],
        },
        files: [{
          expand: true,
          cwd: 'assets/images/',
          src: ['**/*.{png,jpg,gif,svg}'],
          dest: 'assets/images/',
          filter: 'isFile'
        }]
      }
    },

    // Spritesmith
    // Regular and retina images must be in the same folder
    // cssTemplate:
    //    spritesmith-default.less 
    //    spritesmith-responsive.less
    sprite: {
      icons: {
        src: 'src/images/sprites/icons/*.png',
        dest: 'src/images/sprite-icon.png',
        destCss: 'src/less/automatic/sprite-icon.less',
        cssTemplate: 'build-files/spritesmith-default.less',
        imgPath: '@spriteIconsPath',
        padding: 2,
        algorithmOpts: {
          sort: false
        },
        cssFormat: 'css',
        cssOpts: {
          cssClass: function(item) {
            return '.' + item.name;
          }
        },
        retinaSrcFilter: ['src/images/sprites/icons/*@2x.png'],
        retinaDest: 'src/images/2x/sprites-icons.png'
      },
    },

    // Generate favicons
    favicons: {
      icons: {
        options: {
          trueColor: true,
          precomposed: true,
          appleTouchBackgroundColor: "auto",
          coast: true,
          windowsTile: true,
          tileBlackWhite: false,
          tileColor: "auto",
          html: 'src/template/includes/favicon.html',
          HTMLPrefix: "/images/favicon/"
        },
        src: 'src/images/favicon.png',
        dest: 'src/images/favicon'
      }
    },

    // Compress SVG
    svgmin: {
      options: {
        plugins: [{
          removeViewBox: false
        }, {
          removeUselessStrokeAndFill: true
        }, {
          removeAttrs: {
            attrs: ['xmlns', 'fill', 'stroke', 'width', 'height']
          }
        }]
      },
      dev: {
        files: [{
          expand: true,
          dest: 'src/images/svg/',
          src: ['**/*.svg'],
          cwd: 'src/images/svg/'
        }]
      }
    },

    /**
     * Style tasks
     */

    // SASS Compile
    sass: {
      dev: {
        options: {
          sourceMap: true
        },
        files: {
          "style.css": "src/sass/style.scss"
        }
      },
      prod: {
        files: {
          "style.prod.css": "src/sass/style.scss"
        }
      }
    },
    // Postcss
    postcss: {
      prod: {
        options: {
          processors: [
            require('autoprefixer')({
              browsers: ['last 2 versions', 'ie >= 8', 'Android >= 4.0.0', 'Safari >= 7.1', 'iOS >= 6']
            }), // add vendor prefixes
            require('postcss-pxtorem')({
              rootValue: 10,
              unitPrecision: 5,
              propWhiteList: [],
              selectorBlackList: [],
              replace: true,
              mediaQuery: false,
              minPixelValue: 0
            })
          ],
          map: false
        },
        src: '*.css'
      },
      min: {
        options: {
          processors: [
            require('cssnano')({
              zindex: false,
              autoprefixer: false
            }) // minify the result
          ],
          map: false
        },
        src: 'style.prod.css'
      }
    },

    // Delete unuse css class, id
    // Must be in subtask (Warning: pattern.indexOf is not a function)
    uncss: {
      prod: {
        options: {
          ignore: [
            /\.js_.*/
          ],
          stylesheets: ['css/style.css']
        },
        files: [{
          src: 'public/prod/*.html',
          dest: 'public/prod/css/style.css'
        }]
      },
    },

    // Create critical css
    critical: {
      index: {
        options: {
          base: './',
          width: 1200,
          height: 800
        },
        src: 'index.html',
        dest: 'critical.html'
      }
    },

    // Colors to variables
    autocolor: {
      automatic: {
        expand: true,
        src: '**',
        cwd: 'src/less',
        filter: 'isFile'
      },
      options: {
        variableFile: "src/less/variables/colors.less",
        prefix: "@"
      }
    },

    // Combine matching media queries into one media query definition
    cmq: {
      options: {
        log: true
      },
      your_target: {
        files: [{
          src: 'style.prod.css',
          dest: 'style.prod.css',
        }]
      }
    },

    //===== Addon

    // Tests
    cssstats: {
      options: {
        htmlOutput: true,
        jsonOutput: false,
        uniqueDeclarations: [
          'font-size',
          'float',
          'width',
          'height',
          'color',
          'background-color'
        ],
        addOrigin: false,
        addRawCss: true,
        addHtmlStyles: true,
        addGraphs: true,
      },
      dev: {
        files: {
          'logs': ['assets/css/style.css'],
        }
      },
      prod: {
        files: {
          'logs': ['public/prod/css/style.css'],
        }
      },
    },

    // Cleaning
    clean: {
      begin: ['public/prod/'],
      end: [
        'public/prod/css/critical*.css',
        'public/prod/images/svg/',
        'public/prod/js/frontbox.js',
        'public/prod/js/frontbox/',
        'public/prod/js/libs',
        'public/prod/js/frontbox-debug.js',
        'public/prod/includes',
      ],
      dev: [
        'assets/*.html'
      ],
      pageres: [
        'logs/localhost*.png',
      ],
      frontbox_update: ['temp/'],
    },

    // Rename CSS selectors
    rcs: {
      css: {
        options: {
          replaceCss: true,
          // config: 'settings/rename_selectors.json',
        },
        files: [{
          src: 'public/prod/css/style.css',
          dest: 'public/prod/css/style.css',
        }]
      },
      all: {
        options: {
          exclude: [
            '.active', 'active'
          ],
        },
        files: [{
          expand: true,
          cwd: 'public/prod',
          src: ['*.html'],
          dest: 'public/prod',
        }]
      }
    },

    // Grunt terminal
    exec: {
      remove_logs: {
        command: 'ngrok http localhost:8000',
        stdout: true,
        stderr: true
      },
    },

    //==== Prod tasks 
    sitemap: {
      dist: {
        // Add ! to exclude html (ex. '!**/google*.html') 
        pattern: ['public/prod/**/*.html'],
        siteRoot: 'public/prod/',
        homepage: html_variables.website_url
      }
    },

    /**
     * Watch
     */

    watch: {

      options: {
        livereload: 35729
      },

      // PHP
      php: {
        files: ['**/*.php'],
        options: {
          spawn: false,
        },
      },

      // Style
      dev: {
        files: ['src/sass/**/*'],
        tasks: ['sass:dev'],
      },

      // Assets
      images: {
        files: ['src/images/**/*.jpg', 'src/images/**/*.png'],
        tasks: ['newer:copy:dev'],
        options: {
          spawn: false,
        },
      },
      svg: {
        files: ['src/images/svg/*.svg'],
        tasks: ['svgmin'],
        options: {
          spawn: false,
        },
      },

      // Javascript
      js: {
        files: ['src/js/**/*'],
        tasks: ['newer:copy:dev_js', 'copy:dev_frontbox', 'preprocess:dev_frontbox'],
        options: {
          spawn: false,
        },
      },
      js_frontbox: {
        files: ['src/js/frontbox/*.js'],
        tasks: ['copy:dev_frontbox', 'preprocess:dev_frontbox'],
        options: {
          spawn: false,
        },
      },

      // Reload
      // livereload: {
      //   options: { livereload: true },
      //   files: ['public/prod/**/*']
      // }
    },

    /**
     * Upadte Frontbox
     */
    curl: {
      'temp/frontbox.zip': 'https://github.com/BartoszPiwek/FrontBox-CSS/archive/master.zip',
    },
    unzip: {
      'frontbox-update/': 'temp/frontbox.zip'
    },

  });

  /**
   * Register tasks
   */

  grunt.registerTask('default', ['dev']);

  // Create virtual host
  grunt.registerTask('up', ['connect:prod:keepalive']);

  // Update frontbox
  grunt.registerTask('update', [
    'curl',
    'unzip',
    'copy:frontbox_update',
    'clean:frontbox_update',
  ]);

  // Generate DEV version
  grunt.registerTask('dev', [
    'newer:copy:dev',
    // 'copy:dev_frontbox',
    // 'preprocess:dev',
    // 'processhtml:dev',
    // 'autoclass',

    /**
     * Style CSS
     */
    'sass:dev',
    'svgmin',
    'autosvg:dev',
    'preprocess:dev_frontbox',
    'watch'
  ]);

  // Generate PROD version
  grunt.registerTask('prod', [
    // BEGIN
    'clean:begin',

    // Images
    // 'favicon',
    'image',
    'svgmin',

    'copy:prod',
    'copy:dev_frontbox',
    'preprocess:prod_frontbox',
    'preprocess:prod',
    // 'processhtml:prod',

    // CSS
    // 'autoclass',
    'sass:prod',
    // 'cmq',
    // 'uncss',
    'postcss:prod',
    'postcss:min',
    // Critical CSS
    //'critical',
    //'processhtml:critical',

    // JavaScript
    'preprocess:dev_frontbox',
    'babel',
    'strip_code',
    'concat:prod',
    // 'removecalls',
    'uglify',

    // General
    // 'hash_res',

    // HTML end
    'autosvg:prod',
    // 'autometa',
    // 'htmlmin',
    // 'prettify',

    // Addons
    //'sitemap', // Create sitemap.xml

    // END
    'clean:end',
  ]);

  grunt.registerTask('prod:scripts', [
    'copy:prod',
    'copy:dev_frontbox',
    'preprocess:prod_frontbox',
    'preprocess:prod',
    'preprocess:dev_frontbox',
    'babel',
    'strip_code',
    'concat:prod',
    'uglify',
    'clean:end',
  ]);

  grunt.registerTask('prod:style', [
    'sass:prod',
    'postcss:prod',
    'postcss:min',
  ]);

  // Images tasks
  grunt.registerTask('banners', ['less:banners', 'watch:banners']);

  // Style tasks
  grunt.registerTask('colors', ['autocolor']);
  grunt.registerTask('style', ['sass:prod', 'postcss:prod', 'postcss:min']);
  grunt.registerTask('scripts', ['copy:prod', 'copy:dev_frontbox', 'preprocess:prod', 'preprocess:dev_frontbox', 'babel', 'concat:prod']);

  // Addon tasks
  grunt.registerTask('libs', ['copy:libs']);
  grunt.registerTask('favicon', ['favicons']);

};